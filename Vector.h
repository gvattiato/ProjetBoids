//****************************************************************************
//
//
//
//****************************************************************************



#ifndef  __VECTOR_H__
#define  __VECTOR_H__
 

// ===========================================================================
//                                  Libraries
// ===========================================================================
#include <cstdio>
#include <cstdlib>



// ===========================================================================
//                                Project Files
// ===========================================================================




// ===========================================================================
//                              Class declarations
// ===========================================================================






class Vector
{
  public :
    
    // =======================================================================
    //                                 Enums
    // =======================================================================
    
    // =======================================================================
    //                               Constructors
    // =======================================================================
    Vector(void);
    Vector(float new_x, float new_y);

    // =======================================================================
    //                                Destructor
    // =======================================================================
    virtual ~Vector(void);

    // =======================================================================
    //                            Accessors: getters
    // =======================================================================

    float getX(void);
    float getY(void);
    const float getNorm(void);

    // =======================================================================
    //                            Accessors: setters
    // =======================================================================

    void setX(float new_x);
    void setY(float new_y);

    // =======================================================================
    //                                Operators
    // =======================================================================

    Vector operator*(float f);
    Vector operator+(Vector otherVector);
    Vector operator=(Vector otherVector);


    // =======================================================================
    //                              Public Methods
    // =======================================================================

    void updateNorm(void);

    // =======================================================================
    //                             Public Attributes
    // =======================================================================





  protected :

    // =======================================================================
    //                            Forbidden Constructors
    // =======================================================================
    /*Vector(void)
    {
      printf("%s:%d: error: call to forbidden constructor.\n", __FILE__, __LINE__);
      exit(EXIT_FAILURE);
    };
    Vector(const Vector &model)
    {
      printf("%s:%d: error: call to forbidden constructor.\n", __FILE__, __LINE__);
      exit(EXIT_FAILURE);
    };
    */

    // =======================================================================
    //                              Protected Methods
    // =======================================================================

    // =======================================================================
    //                             Protected Attributes
    // =======================================================================

    float x;
    float y;
    float norm;

};


// ===========================================================================
//                              Getters' definitions
// ===========================================================================

// ===========================================================================
//                              Setters' definitions
// ===========================================================================

// ===========================================================================
//                             Operators' definitions
// ===========================================================================

// ===========================================================================
//                          Inline functions' definition
// ===========================================================================


#endif // __VECTOR_H__

